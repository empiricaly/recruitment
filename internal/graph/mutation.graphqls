input AuthInput {
  username: String!
  password: String!
}

type AuthResp {
  token: String!
}

"""
Type of the object for Datum updates
"""
enum DatumNodeType {
  PARTICIPANT
}

"""
UpdateDatumInput sets or appends Data on a Node.
"""
input UpdateDatumInput {
  """
  key identifies the unique key of the Datum.
  """
  key: String!

  """
  val is the value of the Datum. It can be any JSON encodable value.
  """
  val: JSON!

  """
  If isAppend is true, the new datum is appended to the existin data for key.
  If not provided, it is assumed to be false.
  """
  isAppend: Boolean

  """
  Type of object on which to update the value. Defaults to PARTICIPANT
  """
  nodeType: DatumNodeType

  """
  ID of object on which to update the value.
  """
  nodeID: ID!
}

"""
DeleteDatumInput deletes Data on a Node.
"""
input DeleteDatumInput {
  """
  key identifies the unique key of the Datum.
  """
  key: String!

  """
  Type of object on which to delete the value. Defaults to PARTICIPANT
  """
  nodeType: DatumNodeType

  """
  ID of object on which to delete the value.
  """
  nodeID: ID!
}

input AddParticipantsInput {
  participants: [ImportedParticipant!]!
  projectID: String
}

input ImportedParticipant {
  id: String!
  createdAt: DateTime!
  mturkWorkerID: String!

  # """
  # Data should be an object with key value pair
  # """
  # data: JSON

  data: [ParticipantData]
}

input ParticipantData {
  key: String!
  val: String!
}

input CreateProjectInput {
  projectID: String!
  name: String!
}

input CreateTemplateInput {
  """
  Project in which to create the Template.
  """
  projectID: ID!

  template: TemplateInput!
}

input TemplateInput {
  """
  ID of Template to update, if updating
  """
  id: ID

  """
  Friendly name.
  """
  name: String!

  """
  Ordered list of Steps for Template.
  """
  steps: [StepInput!]!

  """
  Determines participant selection type.
  """
  selectionType: SelectionType!

  """
  Internal Selection criteria for participants
  """
  internalCriteria: InternalCriteriaInput

  """
  Mturk Selection criteria for participants
  """
  mturkCriteria: MTurkCriteriaInput

  """
  Number of participants desired.
  """
  participantCount: Int!

  """
  Contains adult content.
  From MTurk: This project may contain potentially explicit or offensive
  content, for example, nudity.
  """
  adult: Boolean!

  """
  Use MTurk Sandbox.
  """
  sandbox: Boolean!
}

input UpdateTemplateInput {
  runID: ID!
  template: TemplateInput!
}

input ImportRunInput {
  template: TemplateInput!
}

input DuplicateRunInput {
  runID: ID!
  # If toProjectID is nil, it will duplicate in the same project
  toProjectID: ID
}

input StepInput {
  """
  ID of the step to update, if updating
  """
  id: ID

  """
  Index is the position of the step in the Template.
  """
  index: Int!

  """
  The Type defines what kind of action this step represents.
  """
  type: StepType!

  """
  Duration of Step in seconds. At the end of the duration, the next Step will
  execute.
  If set to 0, the Step executes and immediately moves onto the next Step. This
  mostly works for PARTICIPANT_FILTER Steps and the last Step in a Template.
  """
  duration: Int!

  """
  Arguments for Message type Step.
  """
  msgArgs: MessageStepArgsInput

  """
  Arguments for HIT type Step.
  """
  hitArgs: HITStepArgsInput

  """
  Arguments for Filter type Step.
  """
  filterArgs: FilterStepArgsInput
}

input CreateRunInput {
  projectID: ID!
  template: TemplateInput!
}

input UpdateRunInput {
  ID: ID!
  name: String!
}

input ScheduleRunInput {
  ID: ID!
  startAt: DateTime!
}

input UnscheduleRunInput {
  ID: ID!
}

input StartRunInput {
  ID: ID!
}

input CancelRunInput {
  ID: ID!
}

type Mutation {
  """
  Set or append Data to a Node.
  """
  updateDatum(input: UpdateDatumInput): Datum!

  """
  Delete Data on a Node.
  """
  deleteDatum(input: DeleteDatumInput): [Datum!]!

  # Admin

  """
  Auth allows admins to authenticate.
  """
  auth(input: AuthInput): AuthResp

  """
  Create a new Project.
  """
  createProject(input: CreateProjectInput): Project! @hasRole(role: ADMIN)

  """
  Create a new Template.
  """
  createTemplate(input: CreateTemplateInput): Template! @hasRole(role: ADMIN)

  """
  Update a Template.
  """
  updateTemplate(input: UpdateTemplateInput): Template! @hasRole(role: ADMIN)

  """
  Duplicate a Run.
  """
  duplicateRun(input: DuplicateRunInput): Run! @hasRole(role: ADMIN)

  """
  Import a Run.
  """
  importRun(input: ImportRunInput): Run! @hasRole(role: ADMIN)

  """
  Create Run.
  """
  createRun(input: CreateRunInput): Run! @hasRole(role: ADMIN)

  """
  Update a Run.
  """
  updateRun(input: UpdateRunInput): Run! @hasRole(role: ADMIN)

  """
  Schedule Run.
  """
  scheduleRun(input: ScheduleRunInput): Run! @hasRole(role: ADMIN)

  """
  Unschedule scheduled Run.
  """
  unscheduleRun(input: UnscheduleRunInput): Run! @hasRole(role: ADMIN)

  """
  Start Run immediately.
  """
  startRun(input: StartRunInput): Run! @hasRole(role: ADMIN)

  """
  Cancel Run. If running, it will stop the run. If not yet running, it will just
  mark it as cancelled.
  """
  cancelRun(input: CancelRunInput): Run! @hasRole(role: ADMIN)

  """
  Add participant into internal database from csv or json file.
  """
  addParticipants(input: AddParticipantsInput): [Participant!]! @hasRole(role: ADMIN)
}
