"""
Type of a Step.
"""
enum StepType {
  """
  MTURK_HIT is a step where AWS Mechanical Turk HIT is published.
  """
  MTURK_HIT

  """
  MTURK_MESSAGE is a step where a message sent to AWS Mechanical Turk Workers.
  """
  MTURK_MESSAGE

  """
  PARTICIPANT_FILTER is a participant filtering step.
  """
  PARTICIPANT_FILTER

  """
  WAIT is a step that has duration before executing the next step.
  """
  WAIT
}

"""
ContentType is the type rendering used for a field.
"""
enum ContentType {
  """
  PLAIN uses plain text, no formatting. Templating uses Handlebars-style
  interpolation (i.e. {{url}}).
  """
  PLAIN

  """
  MARKDOWN uses a Markdown renderer. Templating uses Handlebars-style
  interpolation (i.e. {{url}}).
  """
  MARKDOWN

  """
  HTML uses an HTML rendered. Templating uses Handlebars-style
  interpolation (i.e. {{url}}).
  """
  HTML

  """
  REACT uses a React renderer. Templating passes template arguments as props.
  The root component should be the default ES6 export.
  """
  REACT

  """
  SVELTE uses a Svelte renderer. Templating passes template arguments as props.
  The root component should be the default ES6 export.
  """
  SVELTE
}

"""
ParticipantFilterType is the type of user filtering to use.
"""
enum ParticipantFilterType {
  """
  Predefined Filter is a server side defined filter.
  """
  PREDEFINED_FILTER

  """
  JS is a piece of JAvascript code doing the filtering.
  """
  JS

  """
  CONDITION uses the Condition object to do the filtering.
  """
  CONDITION
}

"""
Participant selection type.
"""
enum SelectionType {
  """
  INTERNAL_DB uses local participants database.
  """
  INTERNAL_DB

  """
  MTURK_QUALIFICATIONS uses MTurk Qualitifications to select participants.
  """
  MTURK_QUALIFICATIONS
}

"""
A Project is a container to organize Templates and Runs.
"""
type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: Admin! @goField(forceResolver: true)

  """
  The Project Identifier is used to label Participants having
  taken part in the Project. It should be written in Camel Case,
  e.g., myCoolProject.
  """
  projectID: String!

  """
  Human friendly name for Project
  """
  name: String!

  """
  Templates contained in Project
  """
  templates: [Template!]! @goField(forceResolver: true)

  """
  Runs contained in Project
  """
  runs(runID: ID, statuses: [Status!], limit: Int): [Run!]! @goField(forceResolver: true)

  """
  Participants in this Project.
  """
  participants: [Participant!]! @goField(forceResolver: true)
}

"""
A Run is an instance of a Template. It goes through all Steps in the Template,
managing participants, timing, messages, redirects, filter, and interactions
with external APIs.
"""
type Run {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: Admin!

  """
  Human friendly name for Run
  """
  name: String!

  """
  Procudure this Run corresponds to. When a Run is started, an immutable
  copy of the Template is made at that point in time so that further changes to
  the Template will not affect the Run.
  """
  template: Template! @goField(forceResolver: true)

  """
  Status of the Run, indicating if the Run has started, is ongoing, finished, or
  failed.
  """
  status: Status! @goField(forceResolver: true)

  """
  StartAt is the time when the Run should start, if it is not manually started.
  """
  startAt: DateTime

  """
  Time at which the Run did start.
  """
  startedAt: DateTime

  """
  Time at which the Run did end.
  """
  endedAt: DateTime

  """
  Steps are instanciated Steps, corresponding to the Template Steps and
  containing the state of process of each Step.
  """
  steps: [StepRun!]! @goField(forceResolver: true)

  """
  The current Step at which the Run is, while the Run is on going. Before the
  Run has started and after it is finished, it is null.
  """
  currentStep: StepRun @goField(forceResolver: true)

  """
  Error reason, if the Run failed.
  """
  error: String
}

"""
A StepRun is an instance of a Step. It manages status and operations of a given
Step within a Run.
"""
type StepRun {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: Admin!

  """
  Step this StepRun corresponds to. When a Run is started, an immutable
  copy of the Steps is made at that point in time so that further changes to
  the Steps will not affect the Run.
  """
  step: Step! @goField(forceResolver: true)

  """
  Index is the position of the stepRun in the Run.
  """
  index: Int!

  """
  Status of the StepRun, indicating if the Run has started, is ongoing,
  finished, or failed.
  """
  status: Status! @goField(forceResolver: true)

  """
  Time at which the StepRun started.
  """
  startedAt: DateTime

  """
  Time at which the StepRun ended.
  """
  endedAt: DateTime

  """
  Participant Participations in this Step. Participations can increase while the
  Step is on going.
  """
  participations(first: Int, after: ID): [Participation!]! @goField(forceResolver: true)

  """
  Participants in this Step.
  """
  participants: [Participant!]! @goField(forceResolver: true)

  """
  Number of Participants in this Step.
  """
  participantsCount: Int! @goField(forceResolver: true)
}

"""
Participation is a Participant participating in a Step. Participants are
associaciated with the Run, but Participations offer a finer grained
understanding of when and why Participants joined a Run, and in which Runs they
participated.
"""
type Participation {
  """
  StepRun corresponding to this Participation.
  """
  step: StepRun!

  """
  Participant corresponding to this Participation.
  """
  participant: Participant!

  """
  ID of the MTurk Worker corresponding to this Participation.
  """
  mturkWorkerID: String

  """
  ID of the MTurk Assignment corresponding to this Participation.
  """
  mturkAssignmentID: String

  """
  ID of the MTurk Hit corresponding to this Participation.
  """
  mturkHitID: String

  """
   Corresponds to MTurk AcceptTime: The date and time the Worker
  accepted the assignment.
  """
  mturkAcceptedAt: DateTime

  """
  Corresponds to SubmitTime: If the Worker has submitted results,
  SubmitTime is the date and time the assignment was submitted.
  This value is omitted from the assignment if the Worker has not
  yet submitted results.
  """
  mturkSubmittedAt: DateTime
}

"""
Template is a series of Steps to execute in a Run. A
Template starts with the selection of Participants.
"""
type Template {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: Admin! @goField(forceResolver: true)

  """
  Friendly name.
  """
  name: String!

  """
  Determines participant selection type.
  """
  selectionType: SelectionType! @goField(forceResolver: true)

  """
  Selection criteria for internal DB participants.
  """
  internalCriteria: InternalCriteria

  """
  Selection criteria for internal DB participants.
  """
  mturkCriteria: MTurkCriteria

  """
  Ordered list of Steps in a Template.
  """
  steps: [Step!]! @goField(forceResolver: true)

  """
  Number of participants desired.
  """
  participantCount: Int

  """
  Contains adult content.
  From MTurk: This project may contain potentially explicit or offensive
  content, for example, nudity.
  """
  adult: Boolean!

  """
  Use MTurk Sandbox.
  """
  sandbox: Boolean!
}

"""
InternalCriteria is the criteria for internal database participant selection.
"""
type InternalCriteria {
  """
  Uninitialized means select all imported participants.
  """
  uninitialized: Boolean!

  """
  All means use all participants and ignore the condition field below.
  """
  all: Boolean!

  """
  Condition set the participant must meet to be allowed to participate.
  """
  condition: Condition!
}

"""
Possible Condition values. Only one of the fields in a CompValue should be
defined.
"""
type CompValue {
  int: Int
  float: Float
  string: String
  boolean: Boolean
}

"""
Condition for a filter. A condition must **either**:
- have one or more `and` Conditions
- have one or more `or` Conditions
- have a comparator and one or more values
When comparing against values, the first value is used for operands comparing
single values (LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo,
EqualTo, NotEqualTo). When testing for existence an empty array is DoesNotExist
and an array with one or more values Exists. For In and NotIn all values in the
values array are used.
If the  condition is empty (no and, no or, no key), it will match any record.
"""
type Condition {
  and: [Condition!]
  or: [Condition!]
  key: String
  comparator: Comparator
  values: [CompValue!]
}

"""
MTurkCriteria is the criteria for MTurk Qualifications participant selection.
"""
type MTurkCriteria {
  """
  MTurk Qualifications a Worker must meet before the Worker is allowed to accept
  and complete the HIT.
  """
  qualifications: [MTurkQualificationCriteria!]!
}

"""
The kind of comparison to make against a value.
"""
enum Comparator {
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  EQUAL_TO
  NOT_EQUAL_TO
  EXISTS
  DOES_NOT_EXIST
  IN
  NOT_IN
}

"""
The QualificationType data structure represents a Qualification type, a description of a property of a Worker that must
match the requirements of a HIT for the Worker to be able to accept the HIT. The type also describes how a Worker can obtain
a Qualification of that type, such as through a Qualification test.
See https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationTypeDataStructureArticle.html
"""
type MTurkQulificationType {
  """
  A unique identifier for the Qualification type. A Qualification type is given a Qualification type ID when you call
  the CreateQualificationType operation operation, and it retains that ID forever. Can be up to 255 bytes in length.
  """
  id: ID!

  """
  The name of the Qualification type. The type name is used to identify the type, and to find the type using a Qualification type search.
  """
  name: String!

  """
  A long description for the Qualification type.
  """
  description: String!

  """
  A type that is used to define the comparator.
  """
  type: QualType!
}

"""
The kind of type used on MTurkQualificationType that later we be used to decide the comparator.
"""
enum QualType {
  BOOL
  COMPARISON
  LOCATION
  CUSTOM
}

"""
MTurkQualificationCriteria is an MTurk Qualification requirement. It is an
MTurk Qualification that a Worker must have before the Worker is allowed to
accept a HIT.
See https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html
"""
type MTurkQualificationCriteria {
  """
  The ID of the MTurk Qualification Type.
  """
  id: ID!

  """
  The kind of comparison to make against a Qualification's value.
  You can compare a Qualification's value:
  - To an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan,
    GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue.
  - To a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue.
  - To see if the value is In or NotIn a set of IntegerValue or LocaleValue
    values.
  A Qualification requirement can also test if a Qualification Exists or
  DoesNotExist in the user's profile, regardless of its value.
  """
  comparator: Comparator!

  """
  Array of integer values to compare against the Qualification's value.
  IntegerValue must not be present if Comparator is Exists or DoesNotExist.
  IntegerValue can only be used if the Qualification type has an integer value;
  it cannot be used with the Worker_Locale QualificationType ID, see
  Qualification Type IDs.
  When performing a set comparison by using the In or the NotIn comparator, you
  can use up to 15 elements in this list.
  """
  values: [Int!]

  """
  The locale value to compare against the Qualification's value. The local value
  must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions.
  LocaleValue can only be used with a Worker_Locale QualificationType ID, see
  Qualification Type IDs.
  LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn
  comparators.
  You must only use a single LocaleValue element when using the EqualTo or
  NotEqualTo comparators.
  When performing a set comparison by using the In or the NotIn comparator, you
  can use up to 30 LocaleValue elements in a QualificationRequirement data
  structure.
  """
  locales: [MTurkLocale!]
}

"""
The Locale data structure represents a geographical region or location in MTurk.
"""
type MTurkLocale {
  """
  The country of the locale.
  Type: A valid ISO 3166 country code. For example, the code US refers to the
  United States of America.
  """
  country: String!

  """
  The state or subdivision of the locale.
  Type: Type: A valid ISO 3166-2 subdivision code. For example, the code CA
  refers to the state of California.
  Subdivisions or states are only available for the United States of America.
  """
  subdivision: String
}

"""
Steps are the ordered parts of a Template.
"""
type Step {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: Admin!

  """
  Index is the position of the step in the Template.
  """
  index: Int!

  """
  The Type defines what kind of action this step represents.
  """
  type: StepType! @goField(forceResolver: true)

  """
  Duration of Step in seconds. At the end of the duration, the next Step will
  execute.
  If set to 0, the Step executes and immediately moves onto the next Step. This
  mostly works for PARTICIPANT_FILTER Steps and the last Step in a Template.
  """
  duration: Int!

  """
  Arguments for Message type Step.
  """
  msgArgs: MessageStepArgs

  """
  Arguments for HIT type Step.
  """
  hitArgs: HITStepArgs

  """
  Arguments for Filter type Step.
  """
  filterArgs: FilterStepArgs
}

"""
FilterStepArgs are arguments passed to a Pariticipant Filter Step.
It must contains **either** JS code or the name of pre-defined filtering function.
This is only valid for an PARTICIPANT_FILTER Step.
"""
type FilterStepArgs {
  """
  Type is whether to use a predefined filter, JS code, or the Condition filter
  mechanism.
  """
  type: ParticipantFilterType @goField(forceResolver: true)

  """
  Filter should be the name of pre-defined filtering function.
  """
  filter: String

  """
  Javascript to execute as a participant filter step.
  The code must contain a functinon exported using a default ES6 export.
  The function should accept a single argument object. This object contains the
  following fields:
  - `participants`: the participants entering this step
  - `step`: this step (contains the definition of this step: duration, etc.)
  - `stepRun`: instance of this step (contains the execution of this step: start time, etc.)
  - `template`: parent template of step (contains the definition of the Template)
  - `run`: run this step is part of (contains the instance of the Template)
  The functions should return an array of participants.
  If the functions returns null or undefined, the participants are not filtered.
  If the function throws an exception, the run will fail.
  """
  js: String

  """
  Condition set the participant must meet to be allowed to participate.
  """
  condition: Condition
}

"""
HITStepArgs are arguments passed to a HIT Step.
This is only valid for an MTURK_HIT Step.
"""
type HITStepArgs {
  """
  Title of HIT.
  From MTurk: Describe the task to Workers. Be as specific as possible,
  e.g. "answer a survey about movies", instead of "short survey", so Workers
  know what to expect.
  Tasks that contain adult content are required to include the following phrase
  in your task title: (WARNING: This HIT may contain adult content. Worker
  discretion is advised.)
  """
  title: String!

  """
  Description of HIT.
  From MTurk: Give more detail about this task. This gives Workers a bit more
  information before they decide to view your task.
  """
  description: String!

  """
  Keywords of HIT. Comma-seratred.
  From MTurk: Provide keywords that will help Workers search for your tasks.
  """
  keywords: String!

  """
  DISABLED - Micro-batching is still TBD, probably needs more args.
  """
  microbatch: Boolean!

  """
  MTurk HIT reward for task in USD.
  """
  reward: Float!

  """
  Timeout of a single accepted HIT in seconds.
  """
  timeout: Int!

  """
  Duration in seconds from start of Step before expiration of unconsumed HITs.
  """
  duration: Int!

  """
  Number of HIT workers to accept.
  Note: is this needed? The count is determined by the selection in the first
  Step, then by the number of participants remaining at each Step.
  """
  workersCount: Int!
}

"""
MessageStepArgs are arguments passed to a Step that has a message.
This is only valid for MTURK_HIT and MTURK_MESSAGE Steps.
"""
type MessageStepArgs {
  """
  The subject line of the email message to send.
  """
  subject: String

  """
  URL that will be transformed into a redirect (proxy URL) through the Empirica
  Recruitment website and passed to the Message template. This URL is the final
  destination the worker will land on. Empirica Recruitment redirects
  through the app so we can add parameters to the proxy URL and hide the final
  URL (to limit sharing of URLs).
  """
  url: String

  """
  Message the content to display to the user.
  Template variables:
  - `url`: proxy URL if `url` exist on Step.
  - `step`: this step (contains the definition of this step: duration, etc.)
  - `stepRun`: instance of this step (contains the execution of this step: start time, etc.)
  - `template`: parent Template of step (contains the definition of the Template)
  - `run`: run this step is part of (contains the instance of the Template)
  - `participant`: current participant
  """
  message: String!

  """
  MessageType indicates the rendering language of the Message.
  """
  messageType: ContentType! @goField(forceResolver: true)

  """
  Lobby enables to showing a lobby, and rich-text message to put in the lobby
  Lobby can either expire (see expiration below) to produce the effect of a
  precise start time, or must have a submit button.
  Only available if URL is present.
  Template variables are identical to message.
  """
  lobby: String

  """
  LobbyType indicates the rendering language of the Lobby.
  """
  lobbyType: ContentType @goField(forceResolver: true)

  """
  LobbyExpirtation in seconds from the beginning of the step.
  """
  lobbyExpiration: Int
}

"""
Status of Runs.
"""
enum Status {
  """
  CREATED means the run has been created but hasn't started yet
  """
  CREATED

  """
  RUNNING means the run is currently in progress
  """
  RUNNING

  """
  PAUSED means the run has been paused by an admin
  """
  PAUSED

  """
  DONE means the run has finished `naturally`
  """
  DONE

  """
  TERMINATED means the run has been manually cancelled
  """
  TERMINATED

  """
  FAILED means the run has failed (due to an unrecoverable error)
  """
  FAILED
}

"""
Datum is a single piece of custom data.
"""
type Datum {
  """
  id is the unique globally identifier for the record.
  """
  id: ID!

  """
  createdAt is the time of creation of the record.
  """
  createdAt: DateTime!

  """
  updatedAt is the time of last update of the record.
  """
  updatedAt: DateTime!

  """
  deletedAt is the time when the Datum was deleted. If null, the Datum was not
  deleted.
  """
  deletedAt: DateTime

  """
  key identifies the unique key of the Datum.
  """
  key: String!

  """
  val is the value of the Datum. It can be any JSON encodable value.
  Passing null will delete the Datum.
  """
  val: JSON

  """
  index of the Datum in multi-value Data.
  """
  index: Int

  """
  current is true if the Datum is the current version of the value for key.
  """
  current: Boolean

  """
  versions returns previous versions for the Datum (they all have the same ID).
  """
  versions: [Datum!]! @goField(forceResolver: true)
}

"""
User is either an Admin or a Participant.
"""
union User = Participant | Admin

"""
Participant is a worker in the system.
"""
type Participant {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  Step during which the Participant was created.
  """
  createdBy: StepRun

  """
  All StepRuns the Participant participated in.
  """
  steps: [StepRun!]!

  """
  MTurk Worker ID.
  """
  mturkWorkerID: String

  """
  ProviderIDs contains the IDs from 3rd providers corresponding the participant.
  A single participant could potentially be referenced in different in multiple
  providers.
  """
  providerIDs: [ProviderID!]!

  """
  Data returns the custom data that has been set on the Participant. Can be
  filtered to specific keys. It can also be configured to return deleted keys.
  """
  data(keys: [String!], deleted: Boolean): [Datum!]!
}

"""
ProviderID contains the identifier for a 3rd party provider.
"""
type ProviderID {
  """
  createdAt is the time of creation of the record.
  """
  createdAt: DateTime!

  """
  providerID is the ID of the 3rd party Provider.
  """
  providerID: ID!

  """
  ID is the ID of the 3rd party Provider.
  """
  provider: PROVIDER
}

"""
Supported 3rd party providers.
"""
enum PROVIDER {
  """
  MTURK represents AWS Mechanical Turk
  """
  MTURK
}

"""
Admin is a user that has priviledged access to the data.
"""
type Admin {
  """
  id is the unique globally identifier for the record.
  """
  id: ID!

  """
  createdAt is the time of creation of the record.
  """
  createdAt: DateTime!

  """
  updatedAt is the time of last update of the record.
  """
  updatedAt: DateTime!

  """
  name is the full name of the Admin.
  """
  name: String

  """
  username is the login name of the Admin.
  """
  username: String
}
